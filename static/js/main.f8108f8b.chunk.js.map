{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","State/Task.tsx","Todolist.tsx","State/todolists-reducer.ts","State/tasks-reducer.ts","AppWithRedux.tsx","State/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","size","label","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","AddBox","className","EditableSpan","editMode","setEditMode","color","autoFocus","onBlur","changeTitle","onDoubleClick","Task","task","isDone","Checkbox","checked","changeTaskStatus","id","newTitle","changeTaskTitle","removeTask","Delete","Todolist","addTask","useCallback","changeTodoListTitle","setAllFilter","changeTodoListFilter","setActiveFilter","setCompletedFilter","tasksForTodolist","tasks","filter","t","taskId","taskID","newIsDoneValue","removeTodolist","style","listStyle","paddingLeft","map","Button","initialState","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","todolistId","action","type","removeTaskAC","todoListID","addTaskAC","newFilterValue","addTodoList","v1","AddTodoListAC","todoListComponents","tl","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","copyState","newTask","newTodoList","todoList","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f8108f8b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm clicked')\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean >(false)\r\n\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error ) {\r\n            setError(false)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                label={'Title'}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                error={error}\r\n                helperText={error}\r\n            />\r\n\r\n            {/* <input\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    onKeyPress={onKeyPressAddItem}\r\n                    className={error ? 'error' : ''}\r\n                />*/}\r\n            {/*<button onClick={addItem}>+</button>*/}\r\n\r\n            <IconButton onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {error && <div className={'error-message'}> Title is required !</div>}\r\n        </div>\r\n    )\r\n})","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\n const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan clicked')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const onEnter = (e: any) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(!editMode)\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode ? <TextField\r\n                variant={'standard'}\r\n                color={'primary'}\r\n                size={'small'}\r\n                value={title}\r\n                autoFocus={true}\r\n                onChange={changeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnter}\r\n            />\r\n            /*<input\r\n                value={title}\r\n                autoFocus={true}\r\n                onChange={changeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnter}\r\n            />*/\r\n            : <span onDoubleClick={onEditMode}>{props.title} </span>\r\n    )\r\n})\r\nexport default EditableSpan","import React, {ChangeEvent} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../AppWithRedux\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    // title: string\r\n    removeTask: (taskID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked)\r\n    }\r\n\r\n    const changeTaskTitle = (newTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newTitle)\r\n    }\r\n\r\n    const removeTask = () => {\r\n        props.removeTask(props.task.id)\r\n    }\r\n\r\n\r\n    return <>\r\n        <li className={props.task.isDone ? \"is-done\" : ''}>\r\n            <Checkbox\r\n                checked={props.task.isDone}\r\n                onChange={changeTaskStatus}\r\n                color={'primary'}/>\r\n\r\n            <EditableSpan\r\n\r\n                title={props.task.title}\r\n                changeTitle={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    </>\r\n})\r\n","import React, {useState, KeyboardEvent, ChangeEvent, useCallback} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport { Task } from \"./State/Task\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    console.log('Todolist clicked')\r\n\r\n    const addTask = useCallback((title: string) =>\r\n        props.addTask(title, props.id), [props.id, props.addTask])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) =>\r\n        props.changeTodoListTitle(title, props.id), [props.changeTodoListTitle,  props.id])\r\n\r\n    const setAllFilter = useCallback(() => {\r\n        props.changeTodoListFilter('all', props.id)}, [props.id])\r\n\r\n    const setActiveFilter = useCallback(() => {\r\n            props.changeTodoListFilter('active', props.id)}, [props.id])\r\n\r\n    const setCompletedFilter = useCallback(() => {\r\n            props.changeTodoListFilter('completed', props.id)}, [props.id])\r\n\r\n    const removeTodoList = () => props.removeTodolist(props.id)\r\n\r\n\r\n    let allTodolistTasks = props.tasks\r\n    let tasksForTodolist = allTodolistTasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone )\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone )\r\n    }\r\n\r\n    const removeTask = useCallback((taskId: string) => {\r\n        props.removeTask(taskId, props.id)\r\n    }, [ props.removeTask, props.id])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, newIsDoneValue: boolean ) =>\r\n        props.changeTaskStatus(taskID, newIsDoneValue, props.id), [  props.changeTaskStatus ,props.id])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string) => {\r\n        props.changeTaskTitle(taskID, newTitle, props.id)\r\n    }, [ props.changeTaskTitle ,props.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                        return (\r\n                            <Task\r\n                            key={t.id}\r\n                            task={t}\r\n                            removeTask={removeTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={props.filter === 'all' ? \"secondary\" : 'primary'}\r\n                    size={'small'}\r\n                    onClick={setAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={props.filter === 'active' ? \"secondary\" : 'primary'}\r\n                    size={'small'}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={'contained'}\r\n                    color={props.filter === 'completed' ? \"secondary\" : 'primary'}\r\n                    size={'small'}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTodoListTitleType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodoListFilterType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialState: Array<TodolistType> = []\r\n\r\nexport type ActionType =\r\n    RemoveTodoListActionType | AddTodoListActionType | ChangeTodoListTitleType | ChangeTodoListFilterType\r\n\r\n\r\nexport const todolistsReducer = (todoLists: Array<TodolistType> = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return todoLists.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST' :\r\n\r\n            const newTodoList: TodolistType = {id: action.todolistId, title: action.title, filter: 'all'}\r\n            return [...todoLists, newTodoList]\r\n        case 'CHANGE-TODOLIST-TITLE' :\r\n            const todoList = todoLists.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title\r\n                return [...todoLists]\r\n            }\r\n            return todoLists\r\n\r\n        case 'CHANGE-TODOLIST-FILTER' : {\r\n            const todoList = todoLists.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.filter = action.filter\r\n                return [...todoLists]\r\n            }\r\n            return todoLists\r\n        }\r\n        default:\r\n            return todoLists\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (id: string): RemoveTodoListActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: id}\r\n}\r\nexport const  AddTodoListAC = ( title: string): AddTodoListActionType => {\r\n     return { type: 'ADD-TODOLIST', title: title,todolistId: v1()}\r\n}\r\n\r\nexport const  ChangeTodoListTitleAC = ( title: string, id: string): ChangeTodoListTitleType => {\r\n     return { type: 'CHANGE-TODOLIST-TITLE', title: title, id: id }\r\n}\r\n\r\nexport const  ChangeTodoListFilterAC = ( id: string, filter: FilterValuesType): ChangeTodoListFilterType => {\r\n     return {  type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: id }\r\n}\r\n\r\n\r\n\r\n","\r\nimport {v1} from \"uuid\";\r\n\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\r\nimport { TaskStateType } from \"../AppWithRedux\";\r\n\r\n\r\n\r\n\r\n\r\ntype removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n\r\n}\r\n\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n\r\n}\r\n\r\nlet initialState: TaskStateType = {}\r\n\r\nexport type ActionType = removeTaskActionType | AddTaskActionType |\r\n    ChangeTaskStatusActionType | ChangeTaskTitleActionType |\r\n    AddTodoListActionType | RemoveTodoListActionType\r\n\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] =\r\n                copyState[action.todolistId].filter(task => task.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK' : {\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {...state, [action.todolistId]: [newTask, ...state[action.todolistId]]}\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS' : {\r\n\r\n            return {\r\n                ...state,\r\n                [action.todolistId]:\r\n                    state[action.todolistId].map(task => {\r\n                        if (task.id === action.taskId) {\r\n                            return {...task, isDone: action.isDone}\r\n                        } else {\r\n                            return task\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE' : {\r\n\r\n            return {\r\n                ...state,\r\n                [action.todolistId]:\r\n                    state[action.todolistId].map(task => {\r\n                        if (task.id === action.taskId) {\r\n                            return {...task, title: action.title}\r\n                        } else {\r\n                            return task\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n\r\n        case 'ADD-TODOLIST' :\r\n         let todolistId = action.todolistId\r\n            return {...state, [todolistId]: []}\r\n\r\n        case 'REMOVE-TODOLIST':\r\n        {\r\n            let copyState ={...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): removeTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string,): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC =\r\n    (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n        return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC =\r\n    (taskId: string, title: string,  todolistId: string): ChangeTaskTitleActionType => {\r\n        return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n    }\r\n\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar,\r\n    Typography, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {    ChangeTodoListFilterAC,    ChangeTodoListTitleAC,\r\n      RemoveTodolistAC,    AddTodoListAC\r\n} from \"./State/todolists-reducer\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./State/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './State/tasks-reducer';\r\n\r\n\r\n\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    id: string\r\n    isDone: boolean\r\n}\r\nexport type  FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport default function AppWithRedux() {\r\n//BLL:\r\n\r\n   /* const todoListID_1 = v1();\r\n    const todoListID_2 = v1();\r\n\r\n    const [todoLists, dispatchTodoLists] = useReducer(todoListsReducer, [\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to buy', filter: 'all'}\r\n    ])*/\r\n\r\n  /*  const [tasks, dispatchTasks] = useReducer(tasksReducer, {\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'JS', isDone: false},\r\n            {id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false}\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: false},\r\n            {id: v1(), title: 'Book', isDone: true},\r\n            {id: v1(), title: 'Bread', isDone: true},\r\n            {id: v1(), title: 'RedBull', isDone: false}\r\n        ],\r\n    })*/\r\n\r\nlet todoLists = useSelector<AppRootStateType, TodolistType[]>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n   let dispatch  = useDispatch()\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        let action = removeTaskAC(taskId, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback( (title: string, todoListID: string) => {\r\n        /* const newTask: TaskType = {\r\n             id: v1(),\r\n             title: title,\r\n             isDone: false\r\n         }\r\n         const todoListTasks = tasks[todoListID]\r\n         tasks[todoListID] = [newTask, ...todoListTasks]\r\n         setTasks({...tasks})*/\r\n        let action = addTaskAC(title, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, newIsDoneValue: boolean, todoListID: string) => {\r\n     /*   const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = newIsDoneValue\r\n            setTasks({...tasks})\r\n        }*/\r\n        let action = changeTaskStatusAC(taskID, newIsDoneValue, todoListID)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string, todoListID: string) => {\r\n       /* const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasks({...tasks})\r\n        }*/\r\n        let action = changeTaskTitleAC(taskID, newTitle, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodoListFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n       /* const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }*/\r\n        let action = ChangeTodoListFilterAC(todoListID, newFilterValue )\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback( (newTitle: string, todoListID: string) => {\r\n        /*const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = newTitle\r\n            setTodoLists([...todoLists])\r\n        }*/\r\n        let action = ChangeTodoListTitleAC(newTitle, todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback( (todoListID: string) => {\r\n       /* setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]*/\r\n        let action = RemoveTodolistAC(todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n       /* const newTodoListID = v1()\r\n        const newTodoList: TodolistType = {id: newTodoListID, title: title, filter: 'all'}\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})*/\r\n        let action = AddTodoListAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n\r\n    //UI:\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={10} style={{padding: '20px'}}>\r\n                        <Todolist\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            filter={tl.filter}\r\n                            tasks={tasks[tl.id]}\r\n                            removeTodolist={removeTodolist}\r\n                            addTask={addTask}\r\n                            removeTask={removeTask}\r\n                            changeTodoListFilter={changeTodoListFilter}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport {combineReducers, createStore} from 'redux';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport { tasksReducer } from './tasks-reducer';\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"./State/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}